{"version":3,"sources":["Components/MovieComponent.js","Components/Loader.js","Components/MovieInfoComponent.js","App.js","reportWebVitals.js","index.js"],"names":["MovieComponent","styled","div","CoverImage","img","MovieName","span","InfoColumn","MovieInfo","MovieComponents","props","movie","Title","Year","imdbID","Type","Poster","onClick","onMovieSelected","src","Loading","Styled","Loader","class","Container","Close","MovieInfoComponents","useState","movieInfo","setMovieInfo","selectedMovie","useEffect","Axios","get","API_KEY","then","response","data","imdbRating","Language","Rated","Released","Runtime","Genre","Director","Actors","Plot","Header","AppName","MovieImage","SearchBox","SearchIcon","SearchInput","input","MovieListContainer","NotFound","App","SearchQuery","UpdateSearchQuery","movieList","updateMovieList","timeoutId","updateTimeoutId","fetchData","searchString","a","axios","Search","placeholder","value","onChange","e","clearTimeout","target","timeout","setTimeout","MovieInfoComponent","map","index","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ff649385.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from \"styled-components\";\r\n\r\nconst MovieComponent = styled.div `\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 10px;\r\n    width: 280px;\r\n    box-shadow: 0 3px 10px 0 #aaa;\r\n    cursor: pointer;\r\n`;\r\n\r\nconst CoverImage = styled.img `\r\n    object-fit: cover;\r\n    height: 362px;\r\n`;\r\n\r\nconst MovieName = styled.span `\r\n    font-size: 18px;\r\n    font-weight: 600;\r\n    color: black;\r\n    margin: 15px 0;\r\n    white-space: nowrap;\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\r\n`;\r\n\r\nconst InfoColumn = styled.div `\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n`;\r\n\r\nconst MovieInfo = styled.span `\r\n    font-size: 16px;\r\n    font-weight: 500;\r\n    color: black;\r\n    text-transform: capitalize;\r\n`;\r\n\r\nconst MovieComponents = (props)=> {\r\n\r\n    const {Title, Year, imdbID, Type, Poster} = props.movie;\r\n\r\n\r\n    return (\r\n            <MovieComponent onClick={()=> props.onMovieSelected(imdbID)}>\r\n                <CoverImage src={Poster}/>\r\n                <MovieName>{Title}</MovieName>\r\n                <InfoColumn>\r\n                    <MovieInfo>Year: {Year}</MovieInfo>\r\n                    <MovieInfo>Type: {Type}</MovieInfo>\r\n                </InfoColumn>\r\n            </MovieComponent>\r\n    );\r\n}\r\n\r\nexport default MovieComponents;","import React from 'react';\r\nimport Styled from 'styled-components';\r\n\r\nconst Loading = Styled.div`\r\n    text-align: center;\r\n.lds-ellipsis {\r\n    display: inline-block;\r\n    position: relative;\r\n    width: 80px;\r\n    height: 80px;\r\n  }\r\n  .lds-ellipsis div {\r\n    position: absolute;\r\n    top: 33px;\r\n    width: 13px;\r\n    height: 13px;\r\n    border-radius: 50%;\r\n    background: #222;\r\n    animation-timing-function: cubic-bezier(0, 1, 1, 0);\r\n  }\r\n  .lds-ellipsis div:nth-child(1) {\r\n    left: 8px;\r\n    animation: lds-ellipsis1 0.6s infinite;\r\n  }\r\n  .lds-ellipsis div:nth-child(2) {\r\n    left: 8px;\r\n    animation: lds-ellipsis2 0.6s infinite;\r\n  }\r\n  .lds-ellipsis div:nth-child(3) {\r\n    left: 32px;\r\n    animation: lds-ellipsis2 0.6s infinite;\r\n  }\r\n  .lds-ellipsis div:nth-child(4) {\r\n    left: 56px;\r\n    animation: lds-ellipsis3 0.6s infinite;\r\n  }\r\n  @keyframes lds-ellipsis1 {\r\n    0% {\r\n      transform: scale(0);\r\n    }\r\n    100% {\r\n      transform: scale(1);\r\n    }\r\n  }\r\n  @keyframes lds-ellipsis3 {\r\n    0% {\r\n      transform: scale(1);\r\n    }\r\n    100% {\r\n      transform: scale(0);\r\n    }\r\n  }\r\n  @keyframes lds-ellipsis2 {\r\n    0% {\r\n      transform: translate(0, 0);\r\n    }\r\n    100% {\r\n      transform: translate(24px, 0);\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Loader = () => {\r\n    return (\r\n       <Loading>\r\n       <div class=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div>\r\n       </Loading>\r\n    )\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport Axios from \"axios\";\r\nimport { API_KEY } from \"../App\";\r\nimport styled from \"styled-components\";\r\nimport { Loader } from \"./Loader\";\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  padding: 20px 30px;\r\n  justify-content: center;\r\n  border-bottom: 1px solid lightgray;\r\n`;\r\nconst CoverImage = styled.img`\r\n  object-fit: cover;\r\n  height: 350px;\r\n`;\r\nconst InfoColumn = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: 20px;\r\n`;\r\nconst MovieName = styled.span`\r\n  font-size: 22px;\r\n  font-weight: 600;\r\n  color: black;\r\n  margin: 15px 0;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-transform: capitalize;\r\n  text-overflow: ellipsis;\r\n  & span {\r\n    opacity: 0.8;\r\n  }\r\n`;\r\nconst MovieInfo = styled.span`\r\n  font-size: 16px;\r\n  font-weight: 500;\r\n  color: black;\r\n  overflow: hidden;\r\n  margin: 4px 0;\r\n  text-transform: capitalize;\r\n  text-overflow: ellipsis;\r\n  & span {\r\n    opacity: 0.5;\r\n  }\r\n`;\r\nconst Close = styled.span`\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n  color: black;\r\n  background: lightgray;\r\n  height: fit-content;\r\n  padding: 8px;\r\n  border-radius: 50%;\r\n  cursor: pointer;\r\n  opacity: 0.8;\r\n`;\r\nconst MovieInfoComponents = (props)=> {\r\n\r\n    const [movieInfo, setMovieInfo] = useState();\r\n    const { selectedMovie } = props;\r\n  \r\n    useEffect(() => {\r\n      Axios.get(\r\n        `https://www.omdbapi.com/?i=${selectedMovie}&apikey=${API_KEY}`,\r\n      ).then((response) => setMovieInfo(response.data));\r\n    }, [selectedMovie]);\r\n\r\n    return (\r\n        <Container>\r\n        {movieInfo ? (\r\n          <div>\r\n            <CoverImage src={movieInfo.Poster}/>\r\n            <InfoColumn>\r\n                <MovieName>\r\n                    {movieInfo.Type}: <span>{movieInfo.Title}</span>\r\n                </MovieName>\r\n                <MovieInfo>\r\n                    IMDB Rating: <span>{movieInfo.imdbRating}</span>\r\n                </MovieInfo>\r\n                <MovieInfo>\r\n                    Year: <span>{movieInfo.Year}</span>\r\n                </MovieInfo>\r\n                <MovieInfo>\r\n                    Language: <span>{movieInfo.Language}</span>\r\n                </MovieInfo>\r\n                <MovieInfo>\r\n                    Rated: <span>{movieInfo.Rated}</span>\r\n                </MovieInfo>\r\n                <MovieInfo>\r\n                    Released: <span>{movieInfo.Released}</span>\r\n                </MovieInfo>\r\n                <MovieInfo>\r\n                    Runtime: <span>{movieInfo.Runtime}</span>\r\n                </MovieInfo>\r\n                <MovieInfo>\r\n                    Genre: <span>{movieInfo.Genre}</span>\r\n                </MovieInfo>\r\n                <MovieInfo>\r\n                    Director: <span>{movieInfo.Director}</span>\r\n                </MovieInfo>\r\n                <MovieInfo>\r\n                    Actors: <span>{movieInfo.Actors}</span>\r\n                </MovieInfo>\r\n                <MovieInfo>\r\n                    Plot: <span>{movieInfo.Plot}</span>\r\n                </MovieInfo>\r\n          </InfoColumn>\r\n                \r\n            <Close onClick={() => props.onMovieSelected()}>X</Close>\r\n        </div>\r\n        ) : (\r\n           <Loader/>\r\n        )}\r\n      </Container>\r\n    );\r\n}\r\n\r\nexport default MovieInfoComponents;","import axios from 'axios';\nimport React, {useState} from 'react';\nimport styled from 'styled-components';\nimport MovieComponent from './Components/MovieComponent';\nimport MovieInfoComponent from './Components/MovieInfoComponent';\nexport const API_KEY = \"c9eb6503\";\n\nconst Container = styled.div `\n display: flex;\n flex-direction: column;\n `;\n\nconst Header = styled.div`\n display: flex;\n flex-direction: row;\n justify-content: space-between;\n background-color: black;\n color: white;\n align-items: center;\n padding: 10px;\n font-size: 25px;\n font-weight: bold;\n box-shadow: 0 3px 6px 0 #555;\n`;\n\nconst AppName = styled.div `\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`;\n\nconst MovieImage = styled.img `\n  width: 48px;\n  height: 48px;\n  margin: 15px;\n`; \n\nconst SearchBox = styled.div`\n  display: flex;\n  flex-direction: row;\n  padding: 10px 10px;\n  border-radius: 6px;\n  margin-left: 20px;\n  width: 40%;\n  background-color: white;\n`;\n\nconst SearchIcon = styled.img`\n  width: 32px;\n  height: 32px;\n`;\n\nconst SearchInput = styled.input`\n  color: black;\n  font-size: 16px;\n  font-weight: bold;\n  border: none;\n  outline: none;\n  margin-left: 15px;\n`;\n\nconst MovieListContainer = styled.div `\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  padding: 30px;\n  gap: 24px;\n  justify-content: space-evenly;\n`;\n\nconst NotFound = styled.img`\n  width: 150px;\n  height: 150px;\n  margin: 150px;\n  opacity: 40%;\n`;\n\n\nfunction App() {\n\n  const [SearchQuery, UpdateSearchQuery] = useState(\"\");\n  const[movieList, updateMovieList] = useState([]);\n  const[selectedMovie, onMovieSelected] = useState();\n  const[timeoutId, updateTimeoutId] = useState();\n\n  const fetchData = async(searchString) => {\n    const response = await axios.get(\n      `https://www.omdbapi.com/?s=${searchString}&apikey=${API_KEY}`\n      );\n    updateMovieList(response.data.Search);\n  }\n\n  const onTextChange = (e) => {\n    onMovieSelected(\"\")\n    clearTimeout(timeoutId);\n    UpdateSearchQuery(e.target.value);\n    const timeout = setTimeout(()=> fetchData(e.target.value), 500);\n    updateTimeoutId(timeout);\n  };\n\n  return (\n      <Container>\n              <Header>\n                  <AppName> \n                    <MovieImage src=\"/Movie-Icon.png\"/>\n                    Movie-App\n                  </AppName>\n                  <SearchBox>\n                    <SearchIcon src=\"/SearchIcon.png\"/>\n                    <SearchInput \n                    placeholder=\"Search Movie...\" \n                    value ={SearchQuery}\n                    onChange= {onTextChange}\n                    />\n                  </SearchBox>\n              </Header>\n              \n              {selectedMovie && \n                <MovieInfoComponent \n                selectedMovie={selectedMovie}\n                onMovieSelected={onMovieSelected}\n                />}\n\n                  <MovieListContainer>\n                        {movieList ?  (\n                          movieList.map((movie, index)=> (\n                            <MovieComponent \n                              key={index} \n                              movie={movie} \n                              onMovieSelected={onMovieSelected}\n                              />\n                              ))\n                              ) : (\n                                <NotFound src= \"/Movie-Icon.png\" />\n                              )}\n                  </MovieListContainer>\n      </Container>  \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}